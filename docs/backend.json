{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "role": {
          "type": "string",
          "description": "User's role in the system (e.g., Super Admin, Organization Admin, Manager, Employee, Client)."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "role"
      ]
    },
    "Organization": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Organization",
      "type": "object",
      "description": "Represents an organization within the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Organization entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization."
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project managed within the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "organizationId": {
          "type": "string",
          "description": "Reference to Organization. (Relationship: Organization 1:N Project)"
        },
        "name": {
          "type": "string",
          "description": "Name of the project."
        },
        "description": {
          "type": "string",
          "description": "Description of the project."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the project.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the project.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "organizationId",
        "name",
        "startDate",
        "endDate"
      ]
    },
    "Milestone": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Milestone",
      "type": "object",
      "description": "Represents a milestone within a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Milestone entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Milestone)"
        },
        "name": {
          "type": "string",
          "description": "Name of the milestone."
        },
        "dueDate": {
          "type": "string",
          "description": "Due date of the milestone.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the milestone (e.g., To Do, In Progress, Complete)."
        }
      },
      "required": [
        "id",
        "projectId",
        "name",
        "dueDate",
        "status"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task within a project or milestone.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Task entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Task)"
        },
        "milestoneId": {
          "type": "string",
          "description": "Reference to Milestone. (Relationship: Milestone 1:N Task)"
        },
        "name": {
          "type": "string",
          "description": "Name of the task."
        },
        "description": {
          "type": "string",
          "description": "Description of the task."
        },
        "assigneeId": {
          "type": "string",
          "description": "Reference to User assigned to the task. (Relationship: User 1:N Task)"
        },
        "dueDate": {
          "type": "string",
          "description": "Due date of the task.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the task (e.g., To Do, In Progress, Complete)."
        }
      },
      "required": [
        "id",
        "projectId",
        "name",
        "assigneeId",
        "dueDate",
        "status"
      ]
    },
    "Vendor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Vendor",
      "type": "object",
      "description": "Represents a vendor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Vendor entity."
        },
        "organizationId": {
          "type": "string",
          "description": "Reference to Organization. (Relationship: Organization 1:N Vendor)"
        },
        "name": {
          "type": "string",
          "description": "Name of the vendor."
        },
        "contactEmail": {
          "type": "string",
          "description": "Contact email of the vendor.",
          "format": "email"
        },
        "rating": {
          "type": "number",
          "description": "Rating of the vendor."
        }
      },
      "required": [
        "id",
        "organizationId",
        "name",
        "contactEmail"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Client entity."
        },
        "organizationId": {
          "type": "string",
          "description": "Reference to Organization. (Relationship: Organization 1:N Client)"
        },
        "name": {
          "type": "string",
          "description": "Name of the client."
        },
        "contactEmail": {
          "type": "string",
          "description": "Contact email of the client.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "organizationId",
        "name",
        "contactEmail"
      ]
    },
    "Snag": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Snag",
      "type": "object",
      "description": "Represents a snag or issue reported by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Snag entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Snag)"
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Snag)"
        },
        "description": {
          "type": "string",
          "description": "Description of the snag or issue."
        },
        "photoUrl": {
          "type": "string",
          "description": "URL of the photo uploaded for the snag.",
          "format": "uri"
        },
        "status": {
          "type": "string",
          "description": "Status of the snag (e.g., Open, In Progress, Resolved)."
        }
      },
      "required": [
        "id",
        "projectId",
        "clientId",
        "description",
        "status"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}",
        "definition": {
          "entityName": "Organization",
          "schema": {
            "$ref": "#/backend/entities/Organization"
          },
          "description": "Stores organization details.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data. Includes denormalized 'organizationId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/projects/{projectId}/milestones/{milestoneId}",
        "definition": {
          "entityName": "Milestone",
          "schema": {
            "$ref": "#/backend/entities/Milestone"
          },
          "description": "Stores milestone data. Includes denormalized 'organizationId' and 'projectId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "milestoneId",
              "description": "The unique identifier for the milestone."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/projects/{projectId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task data. Includes denormalized 'organizationId' and 'projectId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/projects/{projectId}/milestones/{milestoneId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task data under milestones. Includes denormalized 'organizationId', 'projectId', and 'milestoneId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "milestoneId",
              "description": "The unique identifier for the milestone."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/vendors/{vendorId}",
        "definition": {
          "entityName": "Vendor",
          "schema": {
            "$ref": "#/backend/entities/Vendor"
          },
          "description": "Stores vendor data. Includes denormalized 'organizationId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "vendorId",
              "description": "The unique identifier for the vendor."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data. Includes denormalized 'organizationId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/organizations/{organizationId}/projects/{projectId}/snags/{snagId}",
        "definition": {
          "entityName": "Snag",
          "schema": {
            "$ref": "#/backend/entities/Snag"
          },
          "description": "Stores snag data. Includes denormalized 'organizationId' and 'projectId' for authorization independence.",
          "params": [
            {
              "name": "organizationId",
              "description": "The unique identifier for the organization."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "snagId",
              "description": "The unique identifier for the snag."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence and support the required QAPs. It leverages denormalization and structural segregation for clarity and security.\n\n*   **Users Collection:** Stores user profiles.\n*   **Organizations Collection:** Stores organization details. Projects, Vendors, and Clients are stored as subcollections to the Organizations collection, establishing clear ownership.\n*   **Projects Collection:** Stores project data. Milestones and Snags are stored as subcollections to the Projects collection, ensuring each project encapsulates its related data.\n*   **Tasks Collection:** Tasks are stored in a subcollection under Projects, with an optional subcollection under Milestones.\n\n**Authorization Independence (CRITICAL):** Denormalization is applied to avoid `get()` calls in security rules. For example, the `members` map or `organizationId` would be copied to subcollections if access to milestones or tasks depends on the parent project's or organization's members. This enables atomic operations and simplifies security rules.\n\n**QAPs (Rules are not Filters):** Structural segregation is used to enable secure `list` operations. Each collection contains documents with a homogeneous security posture. For example, private drafts are stored in a different collection than public posts.\n\n*   Path-Based Ownership: The structure uses hierarchical paths for user-owned data (e.g., `/users/{userId}/tasks/{taskId}`).\n*   Membership Map: For collaborative data, the `members` map (`members: {uid1: \"role\", uid2: \"role\"}`) is used."
  }
}